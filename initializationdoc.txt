1. add new cron jobs.
2. address field in work_locations table
3. run this route

Route::get("/run",function() {

    // Find the user by email
    $specialReseller = User::where('email', 'kids20acc@gmail.com')->first();

    if ($specialReseller) {
        // Fetch the required permissions
        $permissions = Permission::whereIn('name', ['handle_self_registered_businesses'])->get();

        if ($permissions->isNotEmpty()) {
            // Assign the permissions to the user
            $specialReseller->givePermissionTo($permissions);
            echo "Permissions assigned successfully.";
        } else {
            echo "Permissions not found.";
        }
    } else {
        echo "User not found.";
    }
            return "ok";
        });

4. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `payrolls` DROP FOREIGN KEY `payrolls_payrun_id_foreign`;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `payrolls`
ADD CONSTRAINT `payrolls_payrun_id_foreign` FOREIGN KEY (`payrun_id`) REFERENCES `payruns`(`id`) ON DELETE CASCADE;

5. emailer_logs table upload to db

6. ALTER TABLE `work_locations` ADD `latitude` VARCHAR(255) NULL DEFAULT NULL AFTER `updated_at`, ADD `longitude` VARCHAR(255) NULL DEFAULT NULL AFTER `latitude`, ADD `is_location_enabled` BOOLEAN NOT NULL AFTER `longitude`;


7. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `users` DROP FOREIGN KEY `users_designation_id_foreign`;
step 2 ALTER TABLE `users`
MODIFY `designation_id` INT NULL;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `users`
ADD CONSTRAINT `users_designation_id_foreign` FOREIGN KEY (`designation_id`) REFERENCES `users`(`id`) ON DELETE set null;

8 insert table user_work_locations
9. run query
Route::get("/run",function() {


    $users = User::whereNotNull("work_location_id")->get();
    foreach($users as $user){
        UserWorkLocation::create([
            "user_id" => $user->id,
            "work_location_id" => $user->work_location_id
        ]);
    }
            return "ok";
        });






10. insert work_shift_locations table
11. ALTER TABLE `work_locations` ADD `is_geo_location_enabled` BOOLEAN NOT NULL AFTER `is_location_enabled`, ADD `is_ip_enabled` BOOLEAN NOT NULL AFTER `is_geo_location_enabled`, ADD `max_radius` DOUBLE NULL AFTER `is_ip_enabled`, ADD `ip_address` VARCHAR(255) NULL AFTER `max_radius`;


12. ALTER TABLE `holidays`
ADD `status` VARCHAR(100) NOT NULL DEFAULT 'pending_approval' AFTER `updated_at`;

UPDATE `holidays` SET `status` = 'approved' WHERE `status` IS NULL;


13. import attendance_projects  and attendance_history_projects

14. https://developement.hrm-backend.interactivehr.co.uk/roleRefresh





16. ALTER TABLE attendance_projects
DROP FOREIGN KEY attendance_projects_project_id_foreign;

ALTER TABLE attendance_projects
MODIFY project_id BIGINT UNSIGNED NULL;

ALTER TABLE attendance_projects
ADD CONSTRAINT attendance_projects_project_id_foreign
FOREIGN KEY (project_id)
REFERENCES projects(id)
ON DELETE SET NULL;


ALTER TABLE attendance_projects
ADD CONSTRAINT attendance_projects_project_id_foreign
FOREIGN KEY (project_id)
REFERENCES projects(id)
ON DELETE SET NULL;

17 Route::get("/run", function() {
    // Get all attendances with non-null project_id using a single query
    $attendances = Attendance::whereNotNull("project_id")->get();

    // Prepare data for bulk insertion
    $attendanceProjects = [];
    foreach ($attendances as $attendance) {
        // Check if project exists, otherwise insert null
        $project = Project::find($attendance->project_id);
        $projectId = $project ? $attendance->project_id : null;

        $attendanceProjects[] = [
            "attendance_id" => $attendance->id,
            "project_id" => $projectId
        ];
    }

    // Bulk insert into AttendanceProject table
    AttendanceProject::insert($attendanceProjects);

    return "ok";
});

18. ALTER TABLE `setting_attendances` ADD `is_geolocation_enabled` BOOLEAN NULL DEFAULT NULL AFTER `updated_at`;

19. import candidate_job_platforms table

20. -- Add the new columns to the table
ALTER TABLE `recruitment_processes`
ADD `use_in_employee` BOOLEAN NOT NULL DEFAULT TRUE AFTER `updated_at`,
ADD `use_in_on_boarding` BOOLEAN NOT NULL DEFAULT TRUE AFTER `use_in_employee`;

-- Update all existing records to set the new fields to TRUE (1)
UPDATE `recruitment_processes`
SET `use_in_employee` = TRUE,
    `use_in_on_boarding` = TRUE;


21. run 2 queries in db,
-- Step 1: Drop the existing foreign key constraint
ALTER TABLE `users` DROP FOREIGN KEY `users_employment_status_id_foreign`;
step 2 ALTER TABLE `users`
MODIFY `employment_status_id` BIGINT UNSIGNED NULL;

-- Step 2: Add the new foreign key constraint with ON DELETE CASCADE
ALTER TABLE `users`
ADD CONSTRAINT `users_employment_status_id_foreign` FOREIGN KEY (`employment_status_id`) REFERENCES `employment_statuses`(`id`) ON DELETE set null;


22. ALTER TABLE attendance_arrears DROP FOREIGN KEY attendance_arrears_attendance_id_foreign;
ALTER TABLE attendance_arrears ADD CONSTRAINT attendance_arrears_attendance_id_foreign FOREIGN KEY (attendance_id) REFERENCES attendances(id) ON DELETE CASCADE;


23. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE user_recruitment_processes DROP FOREIGN KEY user_recruitment_processes_recruitment_process_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE user_recruitment_processes ADD CONSTRAINT user_recruitment_processes_recruitment_process_id_foreign FOREIGN KEY (recruitment_process_id) REFERENCES recruitment_processes(id) ON DELETE CASCADE;


24. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_attendances DROP FOREIGN KEY payroll_attendances_attendance_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_attendances ADD CONSTRAINT payroll_attendances_attendance_id_foreign FOREIGN KEY (attendance_id) REFERENCES attendances(id) ON DELETE CASCADE;

25. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_holidays DROP FOREIGN KEY payroll_holidays_holiday_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_holidays ADD CONSTRAINT payroll_holidays_holiday_id_foreign FOREIGN KEY (holiday_id) REFERENCES holidays(id) ON DELETE CASCADE;


26. -- Step 1: Drop the existing foreign key constraint
ALTER TABLE payroll_leave_records DROP FOREIGN KEY payroll_leave_records_leave_record_id_foreign;

-- Step 2: Add a new foreign key constraint with ON DELETE CASCADE
ALTER TABLE payroll_leave_records ADD CONSTRAINT payroll_leave_records_leave_record_id_foreign FOREIGN KEY (leave_record_id) REFERENCES leave_records(id) ON DELETE CASCADE;


27. Route::get("/run", function() {
    $role = Role::where('name','reseller')->first();

    $permission = Permission::where('name', "bank_create")->first();

        $role->givePermissionTo($permission);


    return "ok";
});

28 FRONT_END_VERSION=red
29. candidate_Recruitment_processeses import table

30. Route::get("/run", function() {
    // Fetch all users in chunks to handle large data sets efficiently
    User::chunk(100, function($users) {
        foreach ($users as $user) {
            // Fetch all DepartmentUser records for the user, ordered by creation date
            $departmentUsers = DepartmentUser::where('user_id', $user->id)
                                              ->orderBy('created_at')
                                              ->get();

            // Check if there are more than one records
            if ($departmentUsers->count() > 1) {
                // Get the IDs of the records to delete, excluding the first one
                $idsToDelete = $departmentUsers->skip(1)->pluck('id');

                // Bulk delete the records
                DepartmentUser::whereIn('id', $idsToDelete)->delete();
            }
        }
    });

    return "ok";
});

31. DROP TABLE `department_employee_rotas`, `user_employee_rotas`;

32. ALTER TABLE employee_rotas
ADD COLUMN department_id BIGINT UNSIGNED NULL,
ADD COLUMN user_id BIGINT UNSIGNED NULL;

ALTER TABLE employee_rotas
ADD CONSTRAINT fk_department
FOREIGN KEY (department_id)
REFERENCES departments(id)
ON DELETE CASCADE;

ALTER TABLE employee_rotas
ADD CONSTRAINT fk_user
FOREIGN KEY (user_id)
REFERENCES users(id)
ON DELETE CASCADE;



33. ALTER TABLE `employee_rotas`
  DROP `type`,
  DROP `attendances_count`,
  DROP `is_business_default`,
  DROP `is_personal`;

  34. ALTER TABLE `work_shifts` DROP `attendances_count`;
  35. ALTER TABLE `work_shift_histories` DROP `attendances_count`;

36. UPDATE `social_sites` SET `link` = '', `deleted_at` = NULL WHERE `social_sites`.`name` = "Other"

37. ALTER TABLE `users` DROP FOREIGN KEY `users_designation_id_foreign`;
38. ALTER TABLE `users`
ADD CONSTRAINT `users_designation_id_foreign`
FOREIGN KEY (`designation_id`) REFERENCES `designations` (`id`) ON DELETE SET NULL;

39. import
40. ALTER TABLE `departments` CHANGE `work_location_id` `work_location_id` BIGINT(20) UNSIGNED NULL DEFAULT NULL;

41. ALTER TABLE `task_categories` ADD `project_id` BIGINT NULL DEFAULT NULL AFTER `updated_at`;

42. Route::get("/run",function() {

    // Find the user by email
    $specialReseller = User::where('email', 'kids20acc@gmail.com')->first();

    if ($specialReseller) {
        // Fetch the required permissions
        $permissions = Permission::whereIn('name', ['system_setting_update'])->get();

        if ($permissions->isNotEmpty()) {
            // Assign the permissions to the user
            $specialReseller->givePermissionTo($permissions);
            echo "Permissions assigned successfully.";
        } else {
            echo "Permissions not found.";
        }
    } else {
        echo "User not found.";
    }
            return "ok";
        });

43. Route::get("/run",function() {

    // Find the user by email
    $specialReseller = User::where('email', 'kids20acc@gmail.com')->first();

    if ($specialReseller) {
        // Fetch the required permissions
        $permissions = Permission::whereIn('name', ['system_setting_view'])->get();

        if ($permissions->isNotEmpty()) {
            // Assign the permissions to the user
            $specialReseller->givePermissionTo($permissions);
            echo "Permissions assigned successfully.";
        } else {
            echo "Permissions not found.";
        }
    } else {
        echo "User not found.";
    }
            return "ok";
        });


44. ALTER TABLE `recruitment_processes` ADD `use_in_employee` BOOLEAN NOT NULL DEFAULT TRUE AFTER `updated_at`, ADD `use_in_on_boarding` BOOLEAN NOT NULL DEFAULT TRUE AFTER `use_in_employee`;

45. ALTER TABLE comments
ADD COLUMN type ENUM('comment', 'history') DEFAULT 'comment' NOT NULL;

46 ALTER TABLE task_categories ADD COLUMN order_no INT DEFAULT 0;
ALTER TABLE tasks ADD COLUMN order_no INT DEFAULT 0;

47. ALTER TABLE businesses ADD COLUMN trail_end_date DATE NULL;

48. ALTER TABLE comments
ADD COLUMN project_id BIGINT UNSIGNED NULL;

ALTER TABLE comments
ADD CONSTRAINT comments_project_id_foreign
FOREIGN KEY (project_id) REFERENCES projects(id)
ON DELETE CASCADE;

49. import termination_types, disabled_termination_types, termination_reasons, disabled_termination_reasons table, terminations, exit_interviews, access_revocations

50. -- Delete existing task categories created by the admin
DELETE FROM task_categories WHERE created_by = 1;

-- Insert new task categories
INSERT INTO task_categories (name, description, is_active, is_default, business_id, order_no, created_by) VALUES
('To Do', 'Tasks that are yet to be started.', 1, 1, NULL, 0, 1),
('In Progress', 'Tasks that are currently being worked on.', 1, 1, NULL, 1, 1),
('Resolved', 'Tasks that have been completed.', 1, 1, NULL, 2, 1),
('Closed', 'Tasks that have been completed and formally closed.', 1, 1, NULL, 3, 1);

51. import service_plan_modules

52.
ALTER TABLE labels
ADD COLUMN project_id BIGINT UNSIGNED;



ALTER TABLE labels
ADD CONSTRAINT fk_project
FOREIGN KEY (project_id)
REFERENCES projects(id)
ON DELETE CASCADE;


52. ALTER TABLE labels
ADD COLUMN unique_identifier VARCHAR(255);

53. ALTER TABLE service_plans
ADD COLUMN number_of_employees_allowed INT DEFAULT 10;

54. ALTER TABLE businesses
ADD COLUMN service_plan_discount_code VARCHAR(255) DEFAULT NULL;


55. ALTER TABLE tasks
ADD COLUMN assigned_to BIGINT UNSIGNED,
ADD CONSTRAINT fk_assigned_to
FOREIGN KEY (assigned_to) REFERENCES users(id)
ON DELETE CASCADE;

56. ALTER TABLE email_templates
ADD COLUMN is_default BOOLEAN NOT NULL,
ADD COLUMN business_id BIGINT UNSIGNED,
ADD CONSTRAINT fk_business_id FOREIGN KEY (business_id) REFERENCES businesses(id) ON DELETE CASCADE;



57. -- Drop the existing foreign key constraint
ALTER TABLE disabled_designations DROP FOREIGN KEY business_id_foreign;

-- Add the new foreign key constraint
ALTER TABLE disabled_designations ADD CONSTRAINT business_id_foreign FOREIGN KEY (business_id) REFERENCES businesses(id) ON DELETE CASCADE;


58. ALTER TABLE email_templates
ADD COLUMN template_variables VARCHAR(255) NULL;

59. Import letter_templates db table and import disabled_letter_templates




hr compliance -> 46


hrm-> 31
hrm-produ-> 31
